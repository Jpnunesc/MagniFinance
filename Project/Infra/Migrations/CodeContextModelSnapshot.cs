// <auto-generated />
using System;
using Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infra.Migrations
{
    [DbContext(typeof(CodeContext))]
    partial class CodeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Domain.Entitys.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Domain.Entitys.GradeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<int>("IdStudent")
                        .HasColumnType("int")
                        .HasColumnName("IdStudent");

                    b.Property<int>("IdSubject")
                        .HasColumnType("int")
                        .HasColumnName("IdSubject");

                    b.Property<int?>("StudentEntityId")
                        .HasColumnType("int");

                    b.Property<decimal>("StudentGrade")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("StudentGrade");

                    b.HasKey("Id");

                    b.HasIndex("IdStudent");

                    b.HasIndex("IdSubject");

                    b.HasIndex("StudentEntityId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Domain.Entitys.StudentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("IdCourse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int>("Registration")
                        .HasMaxLength(9)
                        .HasColumnType("int")
                        .HasColumnName("Registration");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<int?>("SubjectEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubjectEntityId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Domain.Entitys.SubjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<decimal>("Average")
                        .HasMaxLength(10)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Average");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("IdCourse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Staus");

                    b.HasKey("Id");

                    b.HasIndex("IdCourse");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Domain.Entitys.TeacherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<int>("IdSubject")
                        .HasColumnType("int")
                        .HasColumnName("IdSubject");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Remuneration")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Remuneration");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("IdSubject");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Domain.Entitys.GradeEntity", b =>
                {
                    b.HasOne("Domain.Entitys.StudentEntity", "Student")
                        .WithMany()
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitys.SubjectEntity", "Subject")
                        .WithMany()
                        .HasForeignKey("IdSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitys.StudentEntity", null)
                        .WithMany("Grades")
                        .HasForeignKey("StudentEntityId");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entitys.StudentEntity", b =>
                {
                    b.HasOne("Domain.Entitys.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Domain.Entitys.SubjectEntity", null)
                        .WithMany("Students")
                        .HasForeignKey("SubjectEntityId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entitys.SubjectEntity", b =>
                {
                    b.HasOne("Domain.Entitys.CourseEntity", "Course")
                        .WithMany("Subjects")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entitys.TeacherEntity", b =>
                {
                    b.HasOne("Domain.Entitys.SubjectEntity", "Subject")
                        .WithMany()
                        .HasForeignKey("IdSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entitys.CourseEntity", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Domain.Entitys.StudentEntity", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Domain.Entitys.SubjectEntity", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
