// <auto-generated />
using System;
using Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infra.Migrations
{
    [DbContext(typeof(CodeContext))]
    [Migration("20220123194814_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Domain.Entitys.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Information systems",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entitys.GradeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<decimal?>("FistGrade")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("FistGrade");

                    b.Property<decimal?>("Fourthgrade")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Fourthgrade");

                    b.Property<decimal?>("SecondGrade")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SecondGrade");

                    b.Property<int?>("StudentEntityId")
                        .HasColumnType("int")
                        .HasColumnName("StudentEntityId");

                    b.Property<int?>("SubjectEntityId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectEntityId");

                    b.Property<decimal?>("ThirdGrade")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ThirdGrade");

                    b.HasKey("Id");

                    b.HasIndex("StudentEntityId");

                    b.HasIndex("SubjectEntityId");

                    b.ToTable("Grade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FistGrade = 7m,
                            Fourthgrade = 9m,
                            SecondGrade = 8m,
                            StudentEntityId = 1,
                            SubjectEntityId = 1,
                            ThirdGrade = 9m
                        });
                });

            modelBuilder.Entity("Domain.Entitys.StudentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("IdCourse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("IdCourse");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1998, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCourse = 1,
                            Name = "Pedro Luciano",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entitys.SubjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<decimal>("Average")
                        .HasMaxLength(10)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Average");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("IdCourse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Staus");

                    b.HasKey("Id");

                    b.HasIndex("IdCourse");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Average = 8m,
                            IdCourse = 1,
                            Name = "Eng. Software",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entitys.TeacherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<int>("IdSubject")
                        .HasColumnType("int")
                        .HasColumnName("IdSubject");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Remuneration")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Remuneration");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("IdSubject");

                    b.ToTable("Teacher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1994, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdSubject = 1,
                            Name = "João Paulo Costa",
                            Remuneration = 20000m,
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entitys.GradeEntity", b =>
                {
                    b.HasOne("Domain.Entitys.StudentEntity", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentEntityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entitys.SubjectEntity", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectEntityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entitys.StudentEntity", b =>
                {
                    b.HasOne("Domain.Entitys.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entitys.SubjectEntity", b =>
                {
                    b.HasOne("Domain.Entitys.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entitys.TeacherEntity", b =>
                {
                    b.HasOne("Domain.Entitys.SubjectEntity", "Subject")
                        .WithMany()
                        .HasForeignKey("IdSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entitys.StudentEntity", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Domain.Entitys.SubjectEntity", b =>
                {
                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
